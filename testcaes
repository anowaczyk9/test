public class RelationDetailsService implements RelationDetails {
    private final Long productId;
    private final Set<ProductRelationSnapshot> relations;

    @Override
    public Long getProductId() {
        return this.productId;
    }

    @Override
    public Set<ProductRelationSnapshot> relations() {
        return this.relations;
    }

    // Helper methods
    private boolean isTargetOfRelation(ProductsRelationType relationType) {
        return relations.stream()
            .anyMatch(relation -> relation.getRelationType().equals(relationType)
                && productId.equals(relation.getTargetId()));
    }

    private boolean isSourceOfRelation(ProductsRelationType relationType) {
        return relations.stream()
            .anyMatch(relation -> relation.getRelationType().equals(relationType)
                && productId.equals(relation.getSourceId()));
    }

    private Long getSourceIdWhereTarget(ProductsRelationType relationType) {
        return relations.stream()
            .filter(relation -> relation.getRelationType().equals(relationType)
                && productId.equals(relation.getTargetId()))
            .findFirst()
            .map(ProductRelationSnapshot::getSourceId)
            .orElse(null);
    }

    private boolean isSourceAndTargetOfRelation(ProductsRelationType relationType, Long targetProductId) {
        return relations.stream()
            .anyMatch(relation -> relation.getRelationType().equals(relationType)
                && productId.equals(relation.getSourceId())
                && targetProductId.equals(relation.getTargetId()));
    }

    private boolean isTargetAndSourceOfRelation(ProductsRelationType relationType, Long sourceProductId) {
        return relations.stream()
            .anyMatch(relation -> relation.getRelationType().equals(relationType)
                && productId.equals(relation.getTargetId())
                && sourceProductId.equals(relation.getSourceId()));
    }

    // Interface implementation methods
    @Override
    public boolean isModification() {
        return isTargetOfRelation(ProductsRelationType.MODIFICATION);
    }

    @Override
    public boolean isModificationSourceProduct() {
        return isSourceOfRelation(ProductsRelationType.MODIFICATION);
    }

    @Override
    public Long getModifiedProductId() {
        return getSourceIdWhereTarget(ProductsRelationType.MODIFICATION);
    }

    @Override
    public boolean isActivation() {
        return isTargetOfRelation(ProductsRelationType.ACTIVATION);
    }

    @Override
    public boolean isActivationSourceProduct() {
        return isSourceOfRelation(ProductsRelationType.ACTIVATION);
    }

    @Override
    public Long getActivatedProductId() {
        return getSourceIdWhereTarget(ProductsRelationType.ACTIVATION); // Fixed: was using MODIFICATION
    }

    @Override
    public boolean isRenewal() {
        return isTargetOfRelation(ProductsRelationType.RENEWAL);
    }

    @Override
    public boolean isRenewalSourceProduct() {
        return isSourceOfRelation(ProductsRelationType.RENEWAL); // Fixed: was using ACTIVATION
    }

    @Override
    public Long getRenewedProductId() {
        return getSourceIdWhereTarget(ProductsRelationType.RENEWAL);
    }

    @Override
    public boolean isResignation() {
        return isTargetOfRelation(ProductsRelationType.RESIGNATION);
    }

    @Override
    public boolean isResignationSourceProduct() {
        return isSourceOfRelation(ProductsRelationType.RESIGNATION);
    }

    @Override
    public Long getResignedProductId() {
        return getSourceIdWhereTarget(ProductsRelationType.RESIGNATION);
    }

    @Override
    public boolean isRefinancedBy(Long productId) {
        return isSourceAndTargetOfRelation(ProductsRelationType.REFINANCING, productId);
    }

    @Override
    public boolean doesRefinance(Long productId) {
        return isTargetAndSourceOfRelation(ProductsRelationType.REFINANCING, productId);
    }

    @Override
    public boolean isAbsorbedBy(Long productId) {
        return isSourceAndTargetOfRelation(ProductsRelationType.ABSORPTION, productId);
    }

    @Override
    public boolean doesAbsorb(Long productId) {
        return isTargetAndSourceOfRelation(ProductsRelationType.ABSORPTION, productId);
    }
}
