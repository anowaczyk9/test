package com.example.integration;

import com.example.events.ProductChangedEvent;
import com.example.events.ProductChangedEventMessageHeader;
import com.example.repositories.ProductEventRepository;
import com.example.services.ProductReadModelServicePort;
import com.example.services.ProductStatusService;
import com.rabbitmq.client.Channel;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.amqp.support.AmqpHeaders;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.GenericMessage;
import org.springframework.test.context.ActiveProfiles;

import java.util.Map;
import java.util.function.Consumer;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

@SpringBootTest
@ActiveProfiles("test")
public class ProductChangedEventConsumerIntegrationTest {

    // Inject the consumer bean defined in your configuration.
    @Autowired
    private Consumer<Message<ProductChangedEvent>> productChangedEventConsumer;

    // Replace collaborating beans so we can verify interactions.
    @MockBean
    private ProductReadModelServicePort productReadModelServicePort;

    @MockBean
    private ProductEventRepository productEventRepository;

    @MockBean
    private ProductStatusService productStatusService;

    /**
     * Test the successful processing flow:
     * - The event is processed and saved.
     * - The AMQP channel receives a basicAck.
     */
    @Test
    public void testSuccessfulProcessing() throws Exception {
        // Arrange

        // Create a dummy ProductChangedEvent. (Populate any required fields.)
        ProductChangedEvent event = new ProductChangedEvent();
        
        // Create a dummy event header (as expected by your listener).
        ProductChangedEventMessageHeader eventHeader = new ProductChangedEventMessageHeader();
        
        // Create a mock Channel to simulate AMQP channel behavior.
        Channel channel = mock(Channel.class);

        // Build message headers with the necessary entries:
        // - "eventDetails" header is used by suspendProductUpdates.
        // - AmqpHeaders.CHANNEL and AmqpHeaders.DELIVERY_TAG are used for acknowledgment.
        MessageHeaders headers = new MessageHeaders(Map.of(
                "eventDetails", eventHeader,
                AmqpHeaders.CHANNEL, channel,
                AmqpHeaders.DELIVERY_TAG, 1L
        ));

        // Create the message with the payload and headers.
        Message<ProductChangedEvent> message = new GenericMessage<>(event, headers);

        // Act: Execute the consumer with the message.
        productChangedEventConsumer.accept(message);

        // Assert:
        // Verify that the read model service processed the event.
        verify(productReadModelServicePort, times(1)).process(any());
        // Verify that the event was saved.
        verify(productEventRepository, times(1)).saveEvent(eq(event));
        // Verify that basicAck was called with the delivery tag 1 and multiple=false.
        verify(channel, times(1)).basicAck(1L, false);
    }

    /**
     * Test the error processing flow:
     * - The processing throws an exception.
     * - suspendProductUpdates is called.
     * - The AMQP channel receives a basicNack.
     */
    @Test
    public void testErrorProcessing() throws Exception {
        // Arrange

        // Create a dummy ProductChangedEvent.
        ProductChangedEvent event = new ProductChangedEvent();
        
        // Create a dummy event header.
        ProductChangedEventMessageHeader eventHeader = new ProductChangedEventMessageHeader();
        
        // Simulate an exception when processing the event.
        doThrow(new RuntimeException("Processing failed"))
                .when(productReadModelServicePort).process(any());

        // Create a mock Channel.
        Channel channel = mock(Channel.class);

        // Build message headers with required entries.
        MessageHeaders headers = new MessageHeaders(Map.of(
                "eventDetails", eventHeader,
                AmqpHeaders.CHANNEL, channel,
                AmqpHeaders.DELIVERY_TAG, 2L
        ));

        // Create the message.
        Message<ProductChangedEvent> message = new GenericMessage<>(event, headers);

        // Act: Execute the consumer.
        // (The exception is handled internally so this call should not propagate.)
        productChangedEventConsumer.accept(message);

        // Assert:
        // Verify that suspendProductUpdates was called with the correct event header.
        verify(productStatusService, times(1)).suspendProductUpdates(eq(eventHeader));
        // Verify that the event was NOT saved since processing failed.
        verify(productEventRepository, never()).saveEvent(any());
        // Verify that basicNack was called with the delivery tag 2, multiple=false, and requeue=false.
        verify(channel, times(1)).basicNack(2L, false, false);
    }
}
