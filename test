package com.example.health;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

import javax.sql.DataSource;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.util.ReflectionTestUtils;

@ExtendWith(MockitoExtension.class)
class DatabaseHealthCheckerTest {

    @Mock
    private BindingsLifecycleController bindingsLifecycleController;

    @Mock
    private DataSource dataSource;

    @Mock
    private Connection connection;

    @Mock
    private Statement statement;

    @InjectMocks
    private DatabaseHealthChecker databaseHealthChecker;

    @BeforeEach
    void setup() {
        // Manually set the binding name since it would normally be injected via @Value
        ReflectionTestUtils.setField(databaseHealthChecker, "productChangedEventBindingName", "test-binding");
    }

    @Test
    void testHealthyRemainsHealthy() throws Exception {
        // Arrange: Simulate a healthy database connection.
        when(dataSource.getConnection()).thenReturn(connection);
        when(connection.createStatement()).thenReturn(statement);
        // The query executes successfully.
        doNothing().when(statement).execute("SELECT 1");

        // Act: Call the health check.
        databaseHealthChecker.checkDatabaseHealth();

        // Assert: Since the database remains healthy, no start() or stop() calls should be made.
        verify(bindingsLifecycleController, never()).start(anyString());
        verify(bindingsLifecycleController, never()).stop(anyString());
        assertTrue(databaseHealthChecker.isDatabaseHealthy());
    }

    @Test
    void testUnhealthyToHealthyTransition() throws Exception {
        // Arrange: Set up sequential behavior for dataSource.getConnection()
        // First call: simulate failure by throwing SQLException.
        // Second call: return a valid connection.
        when(dataSource.getConnection())
                .thenThrow(new SQLException("Simulated failure"))
                .thenReturn(connection);
        when(connection.createStatement()).thenReturn(statement);
        // For the healthy case, simulate a successful query execution.
        doNothing().when(statement).execute("SELECT 1");

        // Act: First call to health check should simulate a failure.
        databaseHealthChecker.checkDatabaseHealth();
        // Assert: Database should be unhealthy, so stop() should be called.
        assertFalse(databaseHealthChecker.isDatabaseHealthy());
        verify(bindingsLifecycleController, times(1)).stop("test-binding");

        // Act: Second call to health check should simulate recovery.
        databaseHealthChecker.checkDatabaseHealth();
        // Assert: Database should now be healthy, so start() should be called.
        assertTrue(databaseHealthChecker.isDatabaseHealthy());
        verify(bindingsLifecycleController, times(1)).start("test-binding");
    }
}
