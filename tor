package com.santander.clp.product.relations;

// Marker interface
public sealed interface ProductRelationRequest permits ProductCreatedReq, ProductModifiedReq, 
    ProductDeletedReq, ProductRejectedReq, ProductCancelledReq, ProductLaunchedReq, 
    ProductCorrectedReq, PloCreatedReq {
}

/**
 * Basic data structure for product relations
 */
class ProductSimpleRelations {
    Long sourceId;
    Long targetId;
    String relationType;
    
    static ProductSimpleRelations from(ProductRelationDto dto, Long targetId) {
        ProductSimpleRelations relations = new ProductSimpleRelations();
        relations.sourceId = dto.getSourceId();
        relations.targetId = targetId;
        relations.relationType = dto.getRelationType();
        return relations;
    }
}

/**
 * Data structure for inclusive relations
 */
class InclusiveRelationForm {
    Long sourceId;
    Long targetId;
    String relationType;
    Boolean isInclusive;
}

/**
 * Generic relation form
 */
class RelationForm {
    Long sourceId; // może być nullem
    Long targetId; // not null
    String typ; // not null
}

/**
 * Snapshot of product relations
 */
class ProductRelationsSnapshot {
    Long productId;
    Set<ProductSimpleRelations> relations;
}

/**
 * Product creation request
 */
@Builder
@AllArgsConstructor
public final class ProductCreatedReq implements ProductRelationRequest {
    Long idProduktuTworzonego;
    Set<ProductSimpleRelations> relations; // nie brać targetów
    
    // Builder method
    void withRelations(ProductRelationDto formRelations) {
        // mapowane na relations
    }
    
    public Optional<Set<ProductSimpleRelations>> getRelations() {
        return Optional.ofNullable(relations);
    }
}

/**
 * Product modification request
 */
@Builder
@AllArgsConstructor
public final class ProductModifiedReq implements ProductRelationRequest {
    Long sourceId;
    Long targetId;
}

/**
 * Product deletion request
 */
@Builder
@AllArgsConstructor
public final class ProductDeletedReq implements ProductRelationRequest {
    Long deletedProductId;
}

/**
 * Product rejection request
 */
@Builder
@AllArgsConstructor
public final class ProductRejectedReq implements ProductRelationRequest {
    Long rejectedProductId;
}

/**
 * Product cancellation request
 */
@Builder
@AllArgsConstructor
public final class ProductCancelledReq implements ProductRelationRequest {
    Long cancelledProductId;
}

/**
 * Product correction request
 */
@Builder
@AllArgsConstructor
public final class ProductCorrectedReq implements ProductRelationRequest {
    Long correctedProductId;
    Long correctionId;
}

/**
 * Product launch request
 */
@Builder
@AllArgsConstructor
public final class ProductLaunchedReq implements ProductRelationRequest {
    Long ploProductId;
    Long launchedProductId;
}

/**
 * PLO creation request
 */
@Builder
@AllArgsConstructor
public final class PloCreatedReq implements ProductRelationRequest {
    Long sourceProductId;
    Long ploProductId;
}

/**
 * API for product relations management
 */
interface RelationApi {
    Set<ProductRelationsSnapshot> handle(ProductRelationRequest request);
    
    /**
     * Relations created when product is created
     */
    default void relationsOnProductCreated(Long createdProductId, Set<Long> absorbedProductsId, 
                                          Set<Long> refinancedProductsIds) {
        handle(ProductCreatedReq.builder()
                .idProduktuTworzonego(createdProductId)
                .build());
    }
    
    /**
     * Inclusive relations created when product is created
     */
    default void relationsOnProductCreated(Long createdProductId, 
                                          Set<InclusiveRelationForm> createdProductInvisiveRelations) {
        // Implementation would convert inclusive relations to appropriate format
        // and handle them via the ProductCreatedReq
        Set<ProductSimpleRelations> relations = createdProductInvisiveRelations.stream()
                .map(ir -> {
                    ProductSimpleRelations rel = new ProductSimpleRelations();
                    rel.sourceId = ir.sourceId;
                    rel.targetId = ir.targetId;
                    rel.relationType = ir.relationType;
                    return rel;
                })
                .collect(Collectors.toSet());
                
        handle(ProductCreatedReq.builder()
                .idProduktuTworzonego(createdProductId)
                .relations(relations)
                .build());
    }
    
    /**
     * Relations updated when product is updated
     */
    default void relationsOnUpdate(Long updatedProductId, Set<RelationForm> relations) {
        // Implementation would handle product update relations
        Set<ProductSimpleRelations> simpleRelations = relations.stream()
                .map(r -> {
                    ProductSimpleRelations rel = new ProductSimpleRelations();
                    rel.sourceId = r.sourceId;
                    rel.targetId = r.targetId;
                    rel.relationType = r.typ;
                    return rel;
                })
                .collect(Collectors.toSet());
                
        handle(ProductCreatedReq.builder()  // Reusing ProductCreatedReq with updated product ID
                .idProduktuTworzonego(updatedProductId)
                .relations(simpleRelations)
                .build());
    }
    
    /**
     * Handle product deletion
     */
    default void relationsOnProductDeleted(Long deletedProductId) {
        handle(ProductDeletedReq.builder()
                .deletedProductId(deletedProductId)
                .build());
    }
    
    /**
     * Handle product rejection
     */
    default void relationsOnProductRejected(Long rejectedProductId) {
        handle(ProductRejectedReq.builder()
                .rejectedProductId(rejectedProductId)
                .build());
    }
    
    /**
     * Handle product cancellation
     */
    default void relationsOnProductCancelled(Long cancelledProductId) {
        handle(ProductCancelledReq.builder()
                .cancelledProductId(cancelledProductId)
                .build());
    }
    
    /**
     * Handle product modification
     */
    default void relationsOnProductModified(Long modifiedProductId, Long modificationId) {
        handle(ProductModifiedReq.builder()
                .sourceId(modifiedProductId)
                .targetId(modificationId)
                .build());
    }
    
    /**
     * Handle product correction
     */
    default void relationsOnProductCorrected(Long correctedProductId, Long correctionId) {
        handle(ProductCorrectedReq.builder()
                .correctedProductId(correctedProductId)
                .correctionId(correctionId)
                .build());
    }
    
    /**
     * Handle PLO creation
     */
    default void relationsOnPloCreated(Long sourceProductId, Long ploProductId) {
        handle(PloCreatedReq.builder()
                .sourceProductId(sourceProductId)
                .ploProductId(ploProductId)
                .build());
    }
    
    /**
     * Handle product launch
     */
    default void relationsOnProductLaunched(Long ploProductId, Long launchedProductId) {
        handle(ProductLaunchedReq.builder()
                .ploProductId(ploProductId)
                .launchedProductId(launchedProductId)
                .build());
    }
}

/**
 * Implementation of RelationApi
 */
@Service
class RelationService implements RelationApi {
    
    @Override
    public Set<ProductRelationsSnapshot> handle(ProductRelationRequest request) {
        if (request instanceof ProductCreatedReq createdReq) {
            return handleProductCreated(createdReq);
        } else if (request instanceof ProductModifiedReq modifiedReq) {
            return handleProductModified(modifiedReq);
        } else if (request instanceof ProductDeletedReq deletedReq) {
            return handleProductDeleted(deletedReq);
        } else if (request instanceof ProductRejectedReq rejectedReq) {
            return handleProductRejected(rejectedReq);
        } else if (request instanceof ProductCancelledReq cancelledReq) {
            return handleProductCancelled(cancelledReq);
        } else if (request instanceof ProductCorrectedReq correctedReq) {
            return handleProductCorrected(correctedReq);
        } else if (request instanceof PloCreatedReq ploCreatedReq) {
            return handlePloCreated(ploCreatedReq);
        } else if (request instanceof ProductLaunchedReq launchedReq) {
            return handleProductLaunched(launchedReq);
        }
        
        throw new IllegalArgumentException("Unknown request type: " + request.getClass().getSimpleName());
    }
    
    private Set<ProductRelationsSnapshot> handleProductCreated(ProductCreatedReq request) {
        // Implementation for handling product creation
        ProductRelationsSnapshot snapshot = new ProductRelationsSnapshot();
        snapshot.productId = request.idProduktuTworzonego;
        snapshot.relations = request.getRelations().orElse(new HashSet<>());
        
        return Set.of(snapshot);
    }
    
    private Set<ProductRelationsSnapshot> handleProductModified(ProductModifiedReq request) {
        // Implementation for handling product modification
        ProductRelationsSnapshot snapshot = new ProductRelationsSnapshot();
        snapshot.productId = request.targetId;
        
        // Create a relation from source to target
        ProductSimpleRelations relation = new ProductSimpleRelations();
        relation.sourceId = request.sourceId;
        relation.targetId = request.targetId;
        relation.relationType = "MODIFICATION";
        
        snapshot.relations = Set.of(relation);
        
        return Set.of(snapshot);
    }
    
    private Set<ProductRelationsSnapshot> handleProductDeleted(ProductDeletedReq request) {
        // Implementation for handling product deletion
        ProductRelationsSnapshot snapshot = new ProductRelationsSnapshot();
        snapshot.productId = request.deletedProductId;
        snapshot.relations = new HashSet<>(); // Clear relations
        
        return Set.of(snapshot);
    }
    
    private Set<ProductRelationsSnapshot> handleProductRejected(ProductRejectedReq request) {
        // Implementation for handling product rejection
        ProductRelationsSnapshot snapshot = new ProductRelationsSnapshot();
        snapshot.productId = request.rejectedProductId;
        snapshot.relations = new HashSet<>(); // Clear relations
        
        return Set.of(snapshot);
    }
    
    private Set<ProductRelationsSnapshot> handleProductCancelled(ProductCancelledReq request) {
        // Implementation for handling product cancellation
        ProductRelationsSnapshot snapshot = new ProductRelationsSnapshot();
        snapshot.productId = request.cancelledProductId;
        snapshot.relations = new HashSet<>(); // Clear relations
        
        return Set.of(snapshot);
    }
    
    private Set<ProductRelationsSnapshot> handleProductCorrected(ProductCorrectedReq request) {
        // Implementation for handling product correction
        ProductRelationsSnapshot snapshot = new ProductRelationsSnapshot();
        snapshot.productId = request.correctionId;
        
        // Create a relation from corrected to correction
        ProductSimpleRelations relation = new ProductSimpleRelations();
        relation.sourceId = request.correctedProductId;
        relation.targetId = request.correctionId;
        relation.relationType = "CORRECTION";
        
        snapshot.relations = Set.of(relation);
        
        return Set.of(snapshot);
    }
    
    private Set<ProductRelationsSnapshot> handlePloCreated(PloCreatedReq request) {
        // Implementation for handling PLO creation
        ProductRelationsSnapshot snapshot = new ProductRelationsSnapshot();
        snapshot.productId = request.ploProductId;
        
        // Create a relation from source to PLO
        ProductSimpleRelations relation = new ProductSimpleRelations();
        relation.sourceId = request.sourceProductId;
        relation.targetId = request.ploProductId;
        relation.relationType = "PLO";
        
        snapshot.relations = Set.of(relation);
        
        return Set.of(snapshot);
    }
    
    private Set<ProductRelationsSnapshot> handleProductLaunched(ProductLaunchedReq request) {
        // Implementation for handling product launch
        ProductRelationsSnapshot snapshot = new ProductRelationsSnapshot();
        snapshot.productId = request.launchedProductId;
        
        // Create a relation from PLO to launched product
        ProductSimpleRelations relation = new ProductSimpleRelations();
        relation.sourceId = request.ploProductId;
        relation.targetId = request.launchedProductId;
        relation.relationType = "LAUNCH";
        
        snapshot.relations = Set.of(relation);
        
        return Set.of(snapshot);
    }
}

/**
 * Example service using the RelationApi
 */
class TestService {
    RelationApi api;
    
    void methodaProduktowa() {
        ProductCreatedReq.builder().idProduktuTworzonego(1L).relations(Set.of()).build();
    }
}
