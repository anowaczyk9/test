@RequiredArgsConstructor
class GetProductAttributesService implements GetProductAttributesPort {
    private final GetProductAttributesDefinitionPort productAttributesPort;
    private final NewCbpGetProductAttributesPort newGetProductAttributesPort;
    
    @Value("FINANCING_INVESTMENT_LOAN")
    private Set<CbpProductType> newConfigProducts;
    
    @Override
    public Map<String, ProductParameterDto> getProductAttributes(CbpProductType cbpProductType,
                                                               LocalDate effectiveAt) {
        if (!isProductTypeSupported(cbpProductType)) {
            return Collections.emptyMap();
        }
        
        Map<String, ProductParameter> productParameterMap = shouldUseNewConfiguration(cbpProductType)
            ? determineProductParametersForNewCbp(cbpProductType, effectiveAt)
            : determineProductParametersForOldCbp(cbpProductType, effectiveAt);
            
        return ProductParameter.toProductParameterDtoMap(productParameterMap);
    }
    
    private Map<String, ProductParameter> determineProductParametersForOldCbp(
            CbpProductType cbpProductType,
            LocalDate effectiveAt
    ) {
        String productDefinitionId = cbpProductType.getCbpId();
        ProductDefinition productDefinition = getProductDefinitionFromOldCbp(productDefinitionId, effectiveAt);
        Map<String, ProductParameter> parameterMap = 
            ProductAttributesMapper.mapCbpProductParameters(productDefinition);
        
        fillHiddenFields(productDefinition, parameterMap);
        return parameterMap;
    }
    
    private Map<String, ProductParameter> determineProductParametersForNewCbp(
            CbpProductType cbpProductType,
            LocalDate effectiveAt
    ) {
        // For null date - return latest new cbp config
        if (effectiveAt == null) {
            return getLatestParameterMap(cbpProductType);
        }
        
        // Try to get configuration for the specified effectiveAt date
        return newGetProductAttributesPort.getProductAttributesEffectiveAt(cbpProductType, effectiveAt)
            .map(ProductParameter::toProductParameterMap)
            .orElseGet(() -> handleMissingNewConfig(cbpProductType, effectiveAt));
    }
    
    private Map<String, ProductParameter> handleMissingNewConfig(
            CbpProductType cbpProductType,
            LocalDate effectiveAt
    ) {
        ProductDefinition productDefinition = 
            getProductDefinitionFromOldCbp(cbpProductType.getCbpId(), effectiveAt);
            
        // If config from OLD CBP is the latest (not found for effectiveDate)
        // then return latest from NEW CBP
        if (!productDefinition.isUsingEffectiveDateConfiguration()) {
            return getLatestParameterMap(cbpProductType);
        }
        
        // Otherwise use the effective date configuration from the old CBP
        Map<String, ProductParameter> parameterMap = 
            ProductAttributesMapper.mapCbpProductParameters(productDefinition);
        fillHiddenFields(productDefinition, parameterMap);
        return parameterMap;
    }
    
    private ProductDefinition getProductDefinitionFromOldCbp(String productDefinitionId, LocalDate effectiveAt) {
        return productAttributesPort.getProductAttributesDefinition(productDefinitionId, effectiveAt);
    }
    
    private Map<String, ProductParameter> getLatestParameterMap(CbpProductType cbpProductType) {
        return ProductParameter.toProductParameterMap(
            // Rest of implementation not visible in images
        );
    }
}
