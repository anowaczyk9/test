import org.junit.jupiter.api.Test;
import java.util.HashSet;
import java.util.Set;
import static org.assertj.core.api.Assertions.assertThat;

class ProductRelationsUpdatedCommandTest {

    @Test
    void shouldBuildCommandWithBasicFields() {
        // given
        Long productId = 123L;
        Set<ProductRelationsForm> relations = new HashSet<>();
        relations.add(ProductRelationsForm.builder().sourceId(456L).relationType("SIMILAR").build());
        
        // when
        ProductRelationsUpdatedCommand command = ProductRelationsUpdatedCommand.builder()
                .updatedProductId(productId)
                .relations(relations)
                .build();
        
        // then
        assertThat(command.getUpdatedProductId()).isEqualTo(productId);
        assertThat(command.getRelations())
                .hasSize(1)
                .extracting(ProductRelationsForm::getSourceId, ProductRelationsForm::getRelationType)
                .contains(
                        org.assertj.core.api.Assertions.tuple(456L, "SIMILAR")
                );
    }
    
    @Test
    void shouldBuildCommandWithDtos() {
        // given
        Long productId = 123L;
        Set<ProductRelationDto> dtos = new HashSet<>();
        dtos.add(new ProductRelationDto(456L, "SIMILAR"));
        dtos.add(new ProductRelationDto(789L, "ACCESSORY"));
        
        // when
        ProductRelationsUpdatedCommand command = ProductRelationsUpdatedCommand.builder()
                .updatedProductId(productId)
                .withRelations(dtos)
                .build();
        
        // then
        assertThat(command.getUpdatedProductId()).isEqualTo(productId);
        assertThat(command.getRelations())
                .hasSize(2)
                .extracting(ProductRelationsForm::getSourceId, ProductRelationsForm::getRelationType)
                .containsExactlyInAnyOrder(
                        org.assertj.core.api.Assertions.tuple(456L, "SIMILAR"),
                        org.assertj.core.api.Assertions.tuple(789L, "ACCESSORY")
                );
    }
    
    @Test
    void shouldHandleEmptyDtos() {
        // given
        Long productId = 123L;
        
        // when
        ProductRelationsUpdatedCommand command = ProductRelationsUpdatedCommand.builder()
                .updatedProductId(productId)
                .withRelations(null)
                .build();
        
        // then
        assertThat(command.getUpdatedProductId()).isEqualTo(productId);
        assertThat(command.getRelations()).isNotNull().isEmpty();
    }
    
    @Test
    void shouldCombineRelationsFromDifferentSources() {
        // given
        Long productId = 123L;
        
        // Manual relation
        Set<ProductRelationsForm> manualRelations = new HashSet<>();
        manualRelations.add(ProductRelationsForm.builder().sourceId(111L).relationType("MANUAL").build());
        
        // DTO relations
        Set<ProductRelationDto> dtos = new HashSet<>();
        dtos.add(new ProductRelationDto(222L, "FROM_DTO"));
        
        // when
        ProductRelationsUpdatedCommand command = ProductRelationsUpdatedCommand.builder()
                .updatedProductId(productId)
                .relations(manualRelations)
                .withRelations(dtos)
                .build();
        
        // then
        assertThat(command.getUpdatedProductId()).isEqualTo(productId);
        assertThat(command.getRelations())
                .hasSize(2)
                .extracting(ProductRelationsForm::getSourceId, ProductRelationsForm::getRelationType)
                .containsExactlyInAnyOrder(
                        org.assertj.core.api.Assertions.tuple(111L, "MANUAL"),
                        org.assertj.core.api.Assertions.tuple(222L, "FROM_DTO")
                );
    }
    
    @Test
    void shouldOverwriteDuplicateSourceIds() {
        // given
        Long productId = 123L;
        Long duplicateSourceId = 333L;
        
        // First set with the duplicate ID
        Set<ProductRelationsForm> firstSet = new HashSet<>();
        firstSet.add(ProductRelationsForm.builder().sourceId(duplicateSourceId).relationType("FIRST").build());
        
        // DTOs with the same ID but different type
        Set<ProductRelationDto> dtos = new HashSet<>();
        dtos.add(new ProductRelationDto(duplicateSourceId, "SECOND"));
        
        // when
        ProductRelationsUpdatedCommand command = ProductRelationsUpdatedCommand.builder()
                .updatedProductId(productId)
                .relations(firstSet)
                .withRelations(dtos)
                .build();
        
        // then
        assertThat(command.getUpdatedProductId()).isEqualTo(productId);
        assertThat(command.getRelations()).hasSize(1);
        
        ProductRelationsForm relation = command.getRelations().iterator().next();
        assertThat(relation.getSourceId()).isEqualTo(duplicateSourceId);
        
        // The actual relationType depends on equals/hashCode implementation
        // If it's based on sourceId only, the last added will win
        // If it includes relationType, both might be present
        assertThat(relation.getRelationType())
                .isIn("FIRST", "SECOND")
                .as("RelationType should be either FIRST or SECOND");
    }
}

/**
 * Sample classes needed for tests to compile
 * You would replace these with your actual implementations
 */
class ProductRelationDto {
    private final Long sourceId;
    private final String relationType;
    
    public ProductRelationDto(Long sourceId, String relationType) {
        this.sourceId = sourceId;
        this.relationType = relationType;
    }
    
    public Long getSourceId() {
        return sourceId;
    }
    
    public String getRelationType() {
        return relationType;
    }
}

class ProductRelationsForm {
    private final Long sourceId;
    private final String relationType;
    
    private ProductRelationsForm(Long sourceId, String relationType) {
        this.sourceId = sourceId;
        this.relationType = relationType;
    }
    
    public Long getSourceId() {
        return sourceId;
    }
    
    public String getRelationType() {
        return relationType;
    }
    
    public static Builder builder() {
        return new Builder();
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ProductRelationsForm that = (ProductRelationsForm) o;
        return sourceId.equals(that.sourceId);
    }
    
    @Override
    public int hashCode() {
        return sourceId.hashCode();
    }
    
    static class Builder {
        private Long sourceId;
        private String relationType;
        
        public Builder sourceId(Long sourceId) {
            this.sourceId = sourceId;
            return this;
        }
        
        public Builder relationType(String relationType) {
            this.relationType = relationType;
            return this;
        }
        
        public ProductRelationsForm build() {
            return new ProductRelationsForm(sourceId, relationType);
        }
    }
}

interface ProductRelationsCommand {
    // Marker interface
}
