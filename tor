private ProductRelationsSnapshot buildSnapshotForProduct(
        Long productId,
        Set<ProductsRelation> relationsToSave,
        Predicate<ProductsRelation> additionalPredicate) {
    // Predicate that checks if a relation involves the given productId.
    Predicate<ProductsRelation> isInvolved = relation ->
        productId.equals(relation.getSourceId()) || productId.equals(relation.getTargetId());
    
    // Combine the isInvolved predicate with the additional predicate.
    Predicate<ProductsRelation> combinedPredicate = isInvolved.and(additionalPredicate);
    
    // Filter the relations using the combined predicate and map them to snapshots.
    Set<ProductRelationSnapshot> relationSnapshots = relationsToSave.stream()
        .filter(combinedPredicate)
        .map(this::mapToSnapshot) // This helper method converts ProductsRelation -> ProductRelationSnapshot.
        .collect(Collectors.toSet());
    
    // Build and return the ProductRelationsSnapshot for the productId.
    return ProductRelationsSnapshot.builder()
        .productId(productId)
        .relations(relationSnapshots)
        .build();
}
