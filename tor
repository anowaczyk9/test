package com.example;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import static org.assertj.core.api.Assertions.assertThat;

class ProductDecisionEngineTest {

    private final ProductDecisionEngine decisionEngine = new ProductDecisionEngine();

    @Nested
    @DisplayName("isEligibleForPositiveDecision(...) Tests")
    class IsEligibleForPositiveDecisionTests {

        @Test
        @DisplayName("Should return false when field type is overdue")
        void shouldReturnFalseWhenFieldTypeIsOverdue() {
            // Arrange
            String overdueField = "FIELD_TYPE_OVERDUE";
            boolean paymentDatePassed = false;

            // Act
            boolean result = decisionEngine.isEligibleForPositiveDecision(overdueField, paymentDatePassed);

            // Assert
            // Using AssertJ for expressive assertions
            assertThat(result)
                .as("When the field is overdue, eligibility should be false.")
                .isFalse();
        }

        @Test
        @DisplayName("Should return false when payment date has passed")
        void shouldReturnFalseWhenPaymentDatePassed() {
            // Arrange
            String normalField = "NORMAL_FIELD";
            boolean paymentDatePassed = true;

            // Act
            boolean result = decisionEngine.isEligibleForPositiveDecision(normalField, paymentDatePassed);

            // Assert
            assertThat(result)
                .as("When the payment date has passed, eligibility should be false.")
                .isFalse();
        }

        @Test
        @DisplayName("Should return true when field is not overdue and payment date has not passed")
        void shouldReturnTrueWhenFieldIsNormalAndPaymentDateNotPassed() {
            // Arrange
            String normalField = "NORMAL_FIELD";
            boolean paymentDatePassed = false;

            // Act
            boolean result = decisionEngine.isEligibleForPositiveDecision(normalField, paymentDatePassed);

            // Assert
            assertThat(result)
                .as("When the field is normal and payment date not passed, eligibility should be true.")
                .isTrue();
        }
    }
}
