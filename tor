import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.Arrays;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

class CbpPropertyTypeStrategiesTest {

    @Test
    void allEnumValuesShouldHaveStrategy() {
        // Get all enum values
        Set<CbpPropertyType> allEnumValues = Arrays.stream(CbpPropertyType.values())
                .collect(Collectors.toSet());
        
        // Get all keys from the strategy map
        Map<CbpPropertyType, StandardRangeCheckStrategy> strategyMap = CbpPropertyType.getAllStrategies();
        Set<CbpPropertyType> allStrategyKeys = strategyMap.keySet();
        
        // Check if every enum value has a strategy in the map
        Set<CbpPropertyType> missingStrategies = allEnumValues.stream()
                .filter(enumValue -> !allStrategyKeys.contains(enumValue))
                .collect(Collectors.toSet());
        
        // Assert that there are no missing strategies
        assertTrue(
            missingStrategies.isEmpty(), 
            "The following CbpPropertyType values are missing from the strategy map: " + missingStrategies
        );
    }
    
    @Test
    void strategiesShouldNotBeNull() {
        // Get the strategy map
        Map<CbpPropertyType, StandardRangeCheckStrategy> strategyMap = CbpPropertyType.getAllStrategies();
        
        // Check for null strategies
        Set<CbpPropertyType> nullStrategies = strategyMap.entrySet().stream()
                .filter(entry -> entry.getValue() == null)
                .map(Map.Entry::getKey)
                .collect(Collectors.toSet());
        
        // Assert that there are no null strategies
        assertTrue(
            nullStrategies.isEmpty(), 
            "The following CbpPropertyType values have null strategies: " + nullStrategies
        );
    }
    
    @Test
    void noExtraStrategiesInMap() {
        // Get all enum values
        Set<CbpPropertyType> allEnumValues = Arrays.stream(CbpPropertyType.values())
                .collect(Collectors.toSet());
        
        // Get all keys from the strategy map
        Map<CbpPropertyType, StandardRangeCheckStrategy> strategyMap = CbpPropertyType.getAllStrategies();
        Set<CbpPropertyType> allStrategyKeys = strategyMap.keySet();
        
        // Check if there are any keys in the map that don't correspond to enum values
        Set<CbpPropertyType> extraStrategies = allStrategyKeys.stream()
                .filter(key -> !allEnumValues.contains(key))
                .collect(Collectors.toSet());
        
        // Assert that there are no extra strategies
        assertTrue(
            extraStrategies.isEmpty(), 
            "The following keys in the strategy map don't correspond to any CbpPropertyType: " + extraStrategies
        );
    }
    
    @Test
    void getStrategyMethodShouldReturnCorrectStrategy() {
        // Test a few specific cases to ensure getStrategy returns the expected strategy
        StandardRangeCheckStrategy marginStrategy = CbpPropertyType.MARGIN.getStrategy();
        assertNotNull(marginStrategy, "Strategy for MARGIN should not be null");
        assertTrue(marginStrategy instanceof EmptyResultStandardRangeStrategy, 
                "MARGIN should have an EmptyResultStandardRangeStrategy");
        
        StandardRangeCheckStrategy ltvsStrategy = CbpPropertyType.LTV.getStrategy();
        assertNotNull(ltvsStrategy, "Strategy for LTV should not be null");
        assertTrue(ltvsStrategy instanceof DefaultStandardRangeStrategy, 
                "LTV should have a DefaultStandardRangeStrategy");
    }
}
