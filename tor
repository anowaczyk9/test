@RequiredArgsConstructor
final class RelationDetailsImpl implements RelationDetails {
    private final Long productId;
    private final Set<ProductRelationSnapshot> relations;

    @Override
    public Long getProductId() {
        return this.productId;
    }

    @Override
    public Set<ProductRelationSnapshot> relations() {
        return this.relations;
    }

    // --- CORE HELPER METHODS ---
    
    /**
     * Finds a relation where this product is the target of the specified relation type
     */
    private Optional<ProductRelationSnapshot> getTargetOfRelation(ProductsRelationType relationType) {
        return relations.stream()
            .filter(relation -> relation.getRelationType().equals(relationType)
                && productId.equals(relation.getTargetId()))
            .findFirst();
    }

    /**
     * Finds a relation where this product is the source of the specified relation type
     */
    private Optional<ProductRelationSnapshot> getSourceOfRelation(ProductsRelationType relationType) {
        return relations.stream()
            .filter(relation -> relation.getRelationType().equals(relationType)
                && productId.equals(relation.getSourceId()))
            .findFirst();
    }

    /**
     * Checks if this product is the target of the specified relation type
     */
    private boolean hasRelationAsTarget(ProductsRelationType relationType) {
        return getTargetOfRelation(relationType).isPresent();
    }

    /**
     * Checks if this product is the source of the specified relation type
     */
    private boolean hasRelationAsSource(ProductsRelationType relationType) {
        return getSourceOfRelation(relationType).isPresent();
    }

    /**
     * Gets the source ID of a relation where this product is the target
     */
    private Long getRelatedSourceId(ProductsRelationType relationType) {
        return getTargetOfRelation(relationType)
            .map(ProductRelationSnapshot::getSourceId)
            .orElse(null);
    }

    /**
     * Checks if there is a relation of the specified type between this product (as source) 
     * and the given target product
     */
    private boolean hasRelationFromThis(ProductsRelationType relationType, Long targetProductId) {
        return relations.stream()
            .anyMatch(relation -> relation.getRelationType().equals(relationType)
                && productId.equals(relation.getSourceId())
                && targetProductId.equals(relation.getTargetId()));
    }

    /**
     * Checks if there is a relation of the specified type between the given source product
     * and this product (as target)
     */
    private boolean hasRelationToThis(ProductsRelationType relationType, Long sourceProductId) {
        return relations.stream()
            .anyMatch(relation -> relation.getRelationType().equals(relationType)
                && productId.equals(relation.getTargetId())
                && sourceProductId.equals(relation.getSourceId()));
    }

    // --- MODIFICATION RELATIONS ---
    
    @Override
    public boolean isModification() {
        return hasRelationAsTarget(ProductsRelationType.MODIFICATION);
    }

    @Override
    public boolean isModified() {
        return hasRelationAsSource(ProductsRelationType.MODIFICATION);
    }

    @Override
    public Long getModifiedProductId() {
        // First check for MODIFICATION relation
        Long modificationSourceId = getRelatedSourceId(ProductsRelationType.MODIFICATION);
        if (modificationSourceId != null) {
            return modificationSourceId;
        }
        
        // If no MODIFICATION relation, check for CORRECTION relation
        return getRelatedSourceId(ProductsRelationType.CORRECTION);
    }

    // --- CORRECTION RELATIONS ---
    
    @Override
    public boolean isCorrection() {
        return hasRelationAsTarget(ProductsRelationType.CORRECTION);
    }

    @Override
    public boolean isCorrected() {
        return hasRelationAsSource(ProductsRelationType.CORRECTION);
    }

    @Override
    public Long getCorrectedProductId() {
        return getRelatedSourceId(ProductsRelationType.CORRECTION);
    }

    // --- ACTIVATION RELATIONS ---
    
    @Override
    public boolean isActivation() {
        return hasRelationAsTarget(ProductsRelationType.ACTIVATION);
    }

    @Override
    public boolean isActivated() {
        return hasRelationAsSource(ProductsRelationType.ACTIVATION);
    }

    @Override
    public Long getActivatedProductId() {
        return getRelatedSourceId(ProductsRelationType.ACTIVATION);
    }

    // --- RENEWAL RELATIONS ---
    
    @Override
    public boolean isRenewal() {
        return hasRelationAsTarget(ProductsRelationType.RENEWAL);
    }

    @Override
    public boolean isRenewed() {
        return hasRelationAsSource(ProductsRelationType.RENEWAL);
    }

    @Override
    public Long getRenewedProductId() {
        return getRelatedSourceId(ProductsRelationType.RENEWAL);
    }

    // --- RESIGNATION RELATIONS ---
    
    @Override
    public boolean isResignation() {
        return hasRelationAsTarget(ProductsRelationType.RESIGNATION);
    }

    @Override
    public boolean isResigned() {
        return hasRelationAsSource(ProductsRelationType.RESIGNATION);
    }

    @Override
    public Long getResignedProductId() {
        return getRelatedSourceId(ProductsRelationType.RESIGNATION);
    }

    // --- REFINANCING RELATIONS ---
    
    @Override
    public boolean isRefinancedBy(Long productId) {
        return hasRelationFromThis(ProductsRelationType.REFINANCING, productId);
    }

    @Override
    public boolean doesRefinance(Long productId) {
        return hasRelationToThis(ProductsRelationType.REFINANCING, productId);
    }

    // --- ABSORPTION RELATIONS ---
    
    @Override
    public boolean isAbsorbedBy(Long productId) {
        return hasRelationFromThis(ProductsRelationType.ABSORPTION, productId);
    }

    @Override
    public boolean doesAbsorb(Long productId) {
        return hasRelationToThis(ProductsRelationType.ABSORPTION, productId);
    }

    // --- GENERAL RELATION CHECK ---
    
    @Override
    public boolean hasRelation(ProductsRelationType relationType) {
        return relations.stream()
            .anyMatch(relation -> relation.getRelationType().equals(relationType));
    }
}
